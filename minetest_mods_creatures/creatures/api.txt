* Settings (minetest.conf):
	enable_damage = false: When the damage system is off, mobs will not attack. Mobs that would otherwise attack a creature will instead consider avoiding them.
	only_peaceful_mobs = false: When enabled, only mobs that don't have the ability to attack will spawn.
	fast_mobs = false: Whether mobs can run. This should only be turned on when players have the "fast" privilege by default, to ensure balanced gameplay.
	pathfinding = false: Enables mob pathfinding system. Highly experimental, only use for testing purposes!

* Settings (init.lua)
	creatures.player_formspec = function(def): The inventory formspec for all players. Set whenever the player becomes a different creature. Must return either a string, either nil for no effect. def represents the player definition, from which player parameters may be read (see below).
	creatures.player_default = "creatures:ghost": Players who aren't part of a race are set to this creature. Typically applies to new players who join the server for the first time.
	creatures.teams_neutral = 0.1: If the relation between two creatures ranges between -this and +this, the two are considered neutral. Mobs will not idly engage creatures (follow allies or attack enemies) but the relation will be evaluated if a mob is provoked (such as punched).
	creatures.timer_life = 100: Mobs without the 'actor' flag are removed if there aren't any players nearby, checked every this number of seconds. Can be left nil to disable the check, but this might overpopulate the world with mobs and impact server performance!
	creatures.item_wear = 1000: When a creature hits another creature with a tool, that tool is worn out by amount (this / tool_damage). Leave nil to disable tool wearing.

* Functions:
	creatures:register_creature("creatures:ghost", {..}): Defines a new creature, with the current parameters:
	Common parameters (applied to both creatures and players):
		icon = "mobs_*_icon.png": Icon for this creature, indicating what a player or mob is. Players should see it in the inventory menu or the HUD.
		hp_max = 20: Mobs and players are born with this amount of health, and cannot gain more than it.
		armor = {fleshy = 100, ...}: The armor groups. Default is 100, lower values mean less damage for that group.
		collisionbox = {-0.5, 0, -0.5, 0.5, 2, 0.5}: Collosion box size. (TODO: Currently works only for mobs, engine implementation needed for players!)
		visual = "sprite": Visual type of the player and mob.
		mesh = "": 3D model of the player and mob, when mesh visual is used.
		textures = {"clear.png", ...}: Textures used by the player and mob.
		textures = {{"clear.png", ...}, ...}: Texture sets used by the player and mob. When defined like this, a skin is randomly chosen for each creature.
		particles = {...}: Defines the special particles spawned by the creatures:particles command. If nil, particles are not used for this creature. Definition parameters:
			pos_min_x = 0: Minimum X position on the texture.
			pos_min_y = 0: Minimum Y position on the texture.
			pos_max_x = 64: Maximum X position on the texture.
			pos_max_y = 32: Maximum Y position on the texture.
			size_x = 4: Size of the section to be randomly selected between the minimum and maximum X position.
			size_y = 4: Size of the section to be randomly selected between the minimum and maximum Y position.
			amount = 10: Number of particles to be spawned.
			time = 1: How many seconds particles live for.
		visual_size = {x=1, y=1}: Scales the visual of the player and mob.
		animation = {stand = {x = 1, y = 31, ...}, ...}: List of animations available for this mob. Obligatory entries include: stand, walk, walk_punch, punch. It can also contain custom animations, which may be used in creatures:set_animation. Animation parameters:
			x = 1: The start frame of the animation.
			y = 31: The end frame of the animation.
			speed = 20: Animation speed.
			blend = 0: How much this animation should blend in with the previous animation.
			loop = true: Whether this animation should loop or only play once.
		sounds = {attack = "filename", ...}: A list containing sound effects for various actions. Valid entries: attack, damage, die.
		makes_footstep_sound = false: Whether the player and mob make footstep sounds while walking. (TODO: Currently works only for mobs, engine implementation needed for players!)
		env_damage = {...}: Enrivonment damage, dealt once every second. Valid entries:
			groups = {water = 0, ...}: Contains a list of node groups and the amount of damage to deal for each. Creatures will be damaged by the specified amount if they are standing in a node that's part of that group.
			light = 0: Amount of damage the creature takes if exposed to light. If negative, this will instead heal the creature.
			light_level = 0: Minimum light level this creature must be exposed to for damage to occur. Ranges between 0 and 15. If negative, the creature will instead take damage when it's darker than this light level.
		physics = {speed = 1, ...}: Modifies player and mob movement, as an offset to the physics settings in minetest.conf. Valid entries: speed, jump, gravity.
		inventory_main = {x = 8, y = 4}: Size of the main inventory for players which are part of this race.
		inventory_craft = {x = 1, y = 1}: Size of the craft area for players which are part of this race.
		teams = {monsters = 1, ...}: Contains an interest list, where 1 means "pro" and -1 means "con". Friend or foe relationships are determined based on how many things two creatures have in common here.
	Mob only parameters:
		think = 0.5: How fast the base AI executes for this creature. Lower values offer more responsive movement, but also increase server load and the number of packets sent over the network!
		attack_capabilities = {damage_groups = {fleshy = 1}, ...}: Attack capabilities of the mob's punch. If the mob is wielding a tool, the capabilities of that tool are used instead. You normally only need to include damage_groups, full_punch_interval is set to the attack trait if left out.
		items = {{...}, ...}: Contains a list of items and probabilities, which determines what items the mob might spawn with. Parameters:
			name = "default:dirt": The name of the item. It can optionally be a table of strings, in which case a random name is picked.
			chance = 20: Probability that the item will be offered, 1 in this.
			count_min = 1: Minimum number of items in the stack.
			count_max = 99: Maximum number of items in the stack.
			wear_min = 0: Minimum wear. Ranges between 0 and 65535, and should only be used on tools.
			wear_max = 65535: Maximum wear. Ranges between 0 and 65535, and should only be used on tools.
			metadata = nil: Optional metadata of the item stack.
		nodes = {{nodes = "default:dirt", ...}, ...}: A list of parameters, which specifies how mobs react to certain nodes. Each entry represents one target per mob. Parameters include:
			nodes = {"default:dirt", ...}: List of nodes or node groups that mobs will search for.
			light_min = 0: Minimum light level the node most have to be considered an objective.
			light_max = 15: Maximum light level the node most have to be considered an objective.
			objective = "follow": What action to take toward this node. Can be: "follow" to go toward it, "avoid" to move away from it, "attack" to dig it.
			priority = 0: Target priority. The higher, the more importance the mob will give to this node.
		names = {{"Mike", "Dan", ...}, {...}}: A random name will be chosen from this list for each mob. Can be empty for mobs that shouldn't have a name (eg: monsters).
		traits = {attack_interval = {1, 1}, ...}: Personality traits. Each individual mob gets a value between min and max when it first spawns. Actor mobs persist those settings between server restarts. Default traits:
			attack_interval = {1, 1}: How often the mob tries to punch. Lower values mean a greater attack skill. Be careful how you sync this with the full_punch_interval of the attack capabilities used!
			decision_interval = {1, 1}: How often the mob scans for targets and takes new decisions. Lower values mean smarter mobs, but can greatly increase server load!
			vision = {15, 15}: View distance of the mob, and the range in which objectives are visually detected.
			hearing = {10, 10}: Hearing distance of the mob, and how far objectives can be detected using audio cues.
			loyalty = {0.5, 0.5}: How probable it is that the mob will follow allies around and defend them. Must range between 0 and 1!
			fear = {0.5, 0.5}: Likeliness of the mob running away from enemies (if aggressivity doesn't succeed first). Must range between 0 and 1!
			aggressivity = {0.5, 0.5}: Likeliness of the mob to attack enemies (if fear doesn't succeed first). Must range between 0 and 1!
			determination = {0.5, 0.5}: The mob's ability to focus on a task. Lower values mean a greater tolerance to randomly choosing a different target each think. Must range between 0 and 1!
		teams_target = {attack = true, avoid = true, follow = true}: What types of targets this mob will automatically add or change based on team relationships. Can be nil for default behavior.
		alert = {...}: Contains the rules based on which the mob becomes alert. Parameters:
			add = -0.01: How much to modify alert level periodically. Calculated per target scan (intelligence trait). You normally want this to be a small negative value, so alert level slowly drops over time.
			add_friend = 0: How much to modify alert level when detecting a friendly target. Calculated per target scan (intelligence trait), amount added per creature is (relation * this). You normally want this to be 0 or a small negative value, so allies either don't affect alert level or make the creature more calm.
			add_foe = 0.5: How much to modify alert level when detecting an enemy target. Calculated per target scan (intelligence trait), amount added per creature is (relation * this). You normally want this to be a large positive value, so alert level increases to 1 after a few detections.
			add_punch = 1: How much to modify alert level when being punched. Calculated per punch, amount added per creature is (importance * this). You normally want this to be 1 or close, so mobs become alert immediately when getting hit.
			action_look = 0.25: Mobs will only look toward their target when alert level is greater than this.
			action_walk = 0.5: Mobs will only walk toward their target when alert level is greater than this. Must be greater than movement_look!
			action_run = 0.75: Mobs will only run toward their target when alert level is greater than this. Must be greater than movement_walk! Only works if the fast_mobs setting is enabled.
			action_punch = 0.5: Mobs will only attack their target if alert level is greater than this value. Must be greater than movement_look, otherwise it's not guaranteed that the mob is looking at their target and can therefore punch them!
		use_items = true: Whether this mob can use items. Note that setting this to false won't disable this mob's inventory, but it will keep it from doing things like wielding tools or picking up dropped items.
		on_activate = function(self, staticdata, dtime_s) ... end: Function executed when the mob is activated. By default, this should call the logic_mob_activate function.
		on_step = function(self, dtime) ... end: Function executed each step. By default, this should call the logic_mob_step function.
		on_punch = function(self, hitter, time_from_last_punch, tool_capabilities, dir) ... end: Function executed when the mob is punched. By default, this should call the logic_mob_punch function.
		on_rightclick = function(self, clicker) ... end: Function executed when the mob is right-clicked. By default, this should call the logic_mob_rightclick function.
	Player only parameters:
		ghost = "": What creature the player becomes upon death. If blank, creatures.player_default is used.
		eye_offset = {{x = 0, y = 0, z = 0}, {x = 0, y = 0, z = 0}}: Camera offset for 1st and 3rd person views, used to adjust the camera to eye position for creatures of various shapes and sizes.
		fog = {r = 0, g = 0, b = 0}: If set, this fog color is seen by players who are part of this race.
		screen = "hud_*.png": If set, this image is applied over the screen. Use a transparent image here, unless you wish to block the player's vision entirely.
		ambience = "ambient_*": If set, the player will constantly hear this ambiental sound.
		player_join = function(player) ... end: Function executed when a player joins. By default, this should call the logic_player_join function.
		player_step = function(player, dtime) ... end: Function executed each step. By default, this should call the logic_player_step function.
		player_hpchange = function(player, hp_change) ... end: Function executed when the player's HP changes. By default, this should call the logic_player_hpchange function.
		player_die = function(player) ... end: Function executed when the player dies. By default, this should call the logic_player_die function.
		player_respawn = function(player) ... end: Function executed when the player respawns. By default, this should call the logic_player_respawn function.
	Module parameters:
		custom = {mymod = {param1 = "test", param2 = 0, ...} ...}: Allows defining custom properties for modules (sub-mods). For example, if a creature uses a module called "mymod", add specific parameters as mymod = { x = 0, y = 1, ... } to this list, and read them as custom.mymod.x, custom.mymod.y, etc. in the mod.
		traits = {mytrait = {0.25, 0.75}, ...}: Apart from the default traits, custom personality traits for modules may also be defined, as long as they use the same format (mytrait = {min_value, max_value}).
		on_* = function(...) & player_* = function(...): You can include functions from your modules in the builtin execution functions, to run custom code for players and mobs. For example, in on_step, you can add a mymod_step() function after the essential logic_mob_step() function.

	creatures:spawn("creatures:human", {...}): Spawns the given creature at the specified position, returns the object of the spawned mob.
	creatures:register_spawn("creatures:human", {...}): Configures a mob to spawn on a given node. Parameters:
		nodes = {"default:dirt_with_grass", ...}: List of nodes this spawn applies to.
		neighbors = {"air", ...}: The above nodes must be surrounded by at least one node in this list in order to work. You will almost always want this to be {"air"}
		interval = 10: The spawn function is executed every this number of seconds. Lower values are more frequent but can reduce server performance!
		chance = 10000: The chance of a mob spawning (1 / this). Lower values are more frequent but can reduce server performance!
		min_height = -31000: The spawner will only work above this height.
		max_height = 31000: The spawner will only work below this height.
		min_light = 0: Minimum light value at which mobs will spawn.
		max_light = 15: Maximum light value at which mobs will spawn.
		on_spawn = function(pos, node) ... end: Custom spawn function. If present, it must return true for the spawn to occur.

* Scripting - Public functions:
	creatures.selected[player]: The creature which was last right-clicked by 'player'.
	creatures:animation_get(creature): Returns the animation of 'creature'. self should be used for players, self.object for mobs.
	creatures:animation_set(creature, name, speed): Sets the animation of 'creature' to 'name', animation speed multiplied by 'speed'. self should be used for players, self.object for mobs.
	creatures:target_get(self, object): Returns the target definition of 'object' for mob 'self'. If the object field is nil, the function returns the current target instead.
	creatures:target_set(self, object, def): Sets the target definition 'def' of 'object' for mob 'self'. To remove a target, simply use nil for the definition.
	creatures:player_get(player): Gets the race of a player as a table: [1] = name, [2] = skin
	creatures:player_set(player, settings): Sets the race of a player from a table: [1] = name, [2] = skin
	creatures:audibility_get(object): Returns the audibility of the given  player or entry. This is internally used by mobs to detect targets that make noises.
	creatures:audibility_set(object, amount, duration): 'object' is given the audibility 'amount' for 'duration' seconds. You typically want to call this when a player or mob triggers a noise, with amount matching the volume and duration matching the length of the sound.
	creatures:sound(snd, obj): Triggers sound 'snd' on creature 'obj'. This function should be used for voices and other sounds made by creatures. The object should be the player entity for players and self.object for mobs.
	creatures:mob_to_player(player, creature): Causes a player to possess a mob, removing the mob and giving the player its appearance and settings.
	creatures:player_to_mob(player): Causes a player to be exorcised into a mob, ghosting the player and spawning a mob with its appearance and settings.
	creatures:alliance(creature1, creature2): Returns the alliance between two mobs and / or players, ranging between -1 and 1. self should be used for players, self.object for mobs.
	creatures:particles(creature, multiplier): Triggers a particle burst using pieces of the creature's skin, by default used when the creature is damaged. You can optionally specify a value to multiply the particle count by.
	creatures:outfit({{...}, ...}): Uses lists of textures and colors to generate all possible combinations, and outputs a full skin table. Each entry represents a layer, all images are overlayed in order (transparent textures). When used, the "textures" parameter of the creature should point directly to the product of this function. Definition parameters:
		textures = {{"body_1.png", ...}, ...}: The first level of tables contains the texture sets, while the second level contains the textures for each material. Materials are always combined in pairs, and material slots not present in all sets will be discarded. Example: {{"body_1.png", "hair_1.png"}, {"body_2.png", "hair_2.png"}}
		colors = {"#ffffff", ...}: Contains all possible colors for this layer. All textures will be colorized by all colors listed here. If nil, colorization is not used on this layer.
		colors_ratio = 128: How much to colorize the textures. 0 means no colorization, 255 fully replaces the texture with this color.

* Scripting - Formspec:
	A formspec should be defined for each creature, in order to allow interaction between players and mobs (including possession). Formspec settings should be defined together with creatures, ideally as a common function.
	The formspec is shown to the player by calling minetest.show_formspec(clicker:get_player_name(), "creatures:formspec", formspec) from the creature's on_rightclick function.
	Whenever a player right-clicks a mob, their creatures.selected entry is updated. Therefore you can reference the mob the formspec is referring to as creatures.selected[clicker].
	The formspec can contain its own fields, which can be read using a custom minetest.register_on_player_receive_fields function.

* Scripting - Targets:
	By default, mobs will attack or avoid foes and follow allies. This is determined by the teams field (see 'creatures:alliance') and each behavoir can be disabled using 'teams_target'. Mobs may also walk to random nodes, based on the rules specified in 'nodes'.
	Mob targets are of three types: Attack, Avoid, Follow. Each target can address either an entity (creature) or a position (node). Each target has a priority, which alongside multiple factors is used to determine which task the mob chooses.
	Use the 'creatures:target_get' function to get self's target for object. If an object is not specified, this returns the target actively being carried out.
	To add or modify a target use 'creatures:target_set'. Include a table definition to set the target to, or use nil to remove it instead. Every custom target should have the persist property set to true, otherwise the code will assume it was added automatically and may modify it!
	Below is a list of the default target properties. You can add and use your own if needed, for example: creatures:target_set(self, object, {..., mytext = "I'm a target"}). Lastly, keep in mind that the object is used as a table index, meaning it can be anything... like a string or an entity.
		entity = object: The entity this target is addressing. Can be a player or any Lua object. Alternatively you can use "position".
		position = {...}: The position this target is addressing. Alternatively you can use "entity".
		name = "name": The name of the entity this target is addressing. For players this is the player name, for entities this is the definition name, for nodes this is the node name.
		light_min = 0: Node targets only. Indicates the minimum light level at which this target is available.
		light_max = 15: Node targets only. Indicates the maximum light level at which this target is available.
		objective = "type": The type of action to take. Can be "attack", "avoid", or "follow".
		distance = 10: Optional. When set, the target will be taken into account if no further away than this value. If not set, only if it's within the mob's radius of vision.
		priority = 0.5: The importance of this target. The target with the highest priority will be the task carried on by the mob. This also determines the probability for the target to be added at all (per think).
		persist = true: Prevents the logic code from modifying this target, unless its entity is no longer available on the server. Always set this to true, unless there's a precise reason not to!
		on_step = function(self, target) ... end: This function executes per mob think if this is the current target. It's called from the mob's on_step function, after targets are chosen and before actions are taken. 'self' is the mob, 'target' is this target. If it returns false, the mob won't carry out any actions.
		on_punch = function(self, target) ... end: If this is an attack target and the mob is punching, this function is executed if this is the current target. 'self' is the mob, 'target' is this target. If it returns false, the punch is aborted.

* Scripting - Alert:
	Mobs which have the alert parameter set use alert levels. The alert level ranges between 0 and 1, and represents the mob's awareness as well as interest to carry out a task. Only non-persistent creature targets are affected by alert levels, and the calculation is inverted for allies.
	Basically, the alert level specifies how much attention the mob gives to hostiles and how much to allies. When it's 0, the mob doesn't care about enemies and only follows friends. When it's 1, the mob instead ignores all friends and focuses specifically on enemy targets.
	If the alert setup is properly balanced, a mob's alert level will quickly grow when enemies are detected and slowly drop over time and / or when the mob is surrounded by friends. You want mobs to have a fast response toward enemies, but not dwell on an encounter and take too long to revert to friendly mode. Also keep stealth (sneaking behind mobs) in mind.
	At each stage of awareness toward a target, the mob will only do certain tasks. At first, the mob will just sit still and take no action whatsoever. Then it will turn and look toward its target without walking. Next it will also walk toward its target. Then it will additionally run (if fast_mobs is enabled).
	For more info on how to tweak the alert levels of mobs, see the description of the 'alert' parameter above. Only extra paramerer you should know of is alert_level, which contains the alert value itself. You can read or write to and from self.alert_level anytime.

* Scripting - Inventories:
	Mobs can have inventories, which are located in the "inventory" property. You can access self.inventory in a custom function (such as on_step) and read or modify it as desired.
	The inventory is a table of item stacks. For example: If you want to get the name of the first item in the mob's inventory, you would do: self.inventory[1]:get_name().
	The index of the item selected by the mob is stored in the "inventory_wield" property. To get the wielded itemstack, you would use self.inventory[self.inventory_wield].

* Scripting - Entities & Items:
	Entities and wielded items can have special functions, which will be executed by the mob at various points. This includes:
		on_mob_target = function(mob) ... end: Entity definition property. If an entity contains this, the function runs whenever a mob evaluates it as a target. Must either return nil to add no target, or the target definition to be added (eg: {entity = self.object, name = "something", objective = "attack", priority = 1}).
		on_mob_wield = function(self, itemstack) ... end: Item definition property. This function runs per mob think while this item is wielded. It is meant to be the equivalent of on_use for mobs, as well as a way to include custom mob logics in items. If it returns false, the mob won't carry out any actions.
		on_mob_punch = function(self, itemstack) ... end: Item definition property. If the mob is attacking while this item is wielded, this function is called per punch. If it returns false, the punch is aborted.
